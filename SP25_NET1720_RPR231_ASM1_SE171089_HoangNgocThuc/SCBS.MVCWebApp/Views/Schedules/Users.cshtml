@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
	ViewData["Title"] = "Users";
}

<h1>Schedules - jQuery.Ajax call RestFullAPI</h1>

<div class="row mb-3">
	<div class="col">
		<button type="button" class="btn btn-primary" onclick="add();">
			<i class="bi bi-plus-circle"></i> Add New User
		</button>
	</div>
</div>

<div class="card">
	<div class="card-header">
		<h5 class="card-title">User Management</h5>
	</div>
	<div class="card-body">
		<table class="table table-striped table-hover">
			<thead>
				<tr>
					<th>Username</th>
					<th>Role</th>
					<th>Email</th>
					<th>Gender</th>
					<th>Status</th>
					<th>Actions</th>
				</tr>
			</thead>
			<tbody class="tblBody">
			</tbody>
		</table>
	</div>
</div>

<div class="modal" id="userModal" tabindex="-1" aria-labelledby="userModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-xl">
		<div class="modal-content">
			@using (Html.BeginForm(null, null, FormMethod.Post, new { name = "frmUser", id = "frmUser" }))
			{
				@Html.AntiForgeryToken()
				<div class="modal-header">
					<h5 class="modal-title" id="userModalLabel">User</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					<!-- ID field container that will be shown/hidden based on operation type -->
					<div class="form-group row mb-3" id="idContainer" style="display:none;">
						<div class="col-md-4">
							<label for="id" class="form-label">User ID (GUID)</label>
							<input type="text" id="id" name="id" class="form-control" />
							<small class="form-text text-muted">Format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</small>
						</div>
					</div>
					
					<div class="form-group row mb-3">
						<div class="col-md-4">
							<label for="username" class="form-label">Username</label>
							<input type="text" id="username" name="username" class="form-control" />
						</div>
						<div class="col-md-4">
							<label for="fullName" class="form-label">Full Name</label>
							<input type="text" id="fullName" name="fullName" class="form-control" />
						</div>
						<div class="col-md-4">
							<label for="password" class="form-label">Password</label>
							<input type="password" id="password" name="password" class="form-control" />
						</div>
					</div>
					<div class="form-group row mb-3">
						<div class="col-md-4">
							<label for="email" class="form-label">Email</label>
							<input type="email" id="email" name="email" class="form-control" />
						</div>
						<div class="col-md-4">
							<label for="avatar" class="form-label">Avatar</label>
							<input type="text" id="avatar" name="avatar" class="form-control" />
						</div>
						<div class="col-md-4">
							<label for="phone" class="form-label">Phone</label>
							<input type="text" id="phone" name="phone" class="form-control" />
						</div>
					</div>
					<div class="form-group row mb-3">
						<div class="col-md-4">
							<label for="gender" class="form-label">Gender</label>
							<select id="gender" name="gender" class="form-select">
								<option value="">Select Gender</option>
								<option value="Male">Male</option>
								<option value="Female">Female</option>
							</select>
						</div>
						<div class="col-md-4">
							<label for="role" class="form-label">Role</label>
							<select id="role" name="role" class="form-select">
								<option value="">Select Role</option>
								<option value="Admin">Admin</option>
								<option value="Customer">Customer</option>
								<option value="Employee">Employee</option>
							</select>
						</div>
						<div class="col-md-4">
							<label for="status" class="form-label">Status</label>
							<select id="status" name="status" class="form-select">
								<option value="">Select Status</option>
								<option value="Active">Active</option>
								<option value="Inactive">Inactive</option>
								<option value="Removed">Removed</option>
							</select>
						</div>
					</div>
					<div class="form-group row mb-3">
						<div class="col-md-4">
							<label for="rating" class="form-label">Rating</label>
							<input type="number" id="rating" name="rating" class="form-control" min="0" max="5" step="0.1" />
						</div>
						<div class="col-md-4">
							<label for="createdAt" class="form-label">Created At</label>
							<input type="datetime-local" id="createdAt" name="createdAt" class="form-control" />
						</div>
						<div class="col-md-4">
							<label for="updatedAt" class="form-label">Updated At</label>
							<input type="datetime-local" id="updatedAt" name="updatedAt" class="form-control" />
						</div>
					</div>
				</div>
				<div class="modal-footer">
					<button id="btSave" type="button" class="btn btn-primary">Save</button>
					<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
				</div>
			}
		</div>
	</div>
</div>

@section scripts {
	<script type="text/javascript">
		// Variable to track whether we're in add or edit mode
		let isAddMode = true;
		
		$(document).ready(function () {
			loadData();
		});

		function loadData() {
			$.ajax({
				url: 'https://localhost:7051/api/User',
				type: "GET",
				contentType: "application/json;charset=utf-8",
				dataType: "json",
				success: function (result) {
					console.log(result);
					var html = '';
					$.each(result, function (key, item) {
						html += '<tr>';
						html += '<td>' + item.username + '</td>';
						html += '<td>' + item.role + '</td>';
						html += '<td>' + item.email + '</td>';
						html += '<td>' + item.gender + '</td>';
						html += '<td>' +
							'<span class="badge bg-' + getStatusBadgeClass(item.status) + '">' +
							item.status +
							'</span></td>';
						html += '<td>' +
							'<button class="btn btn-primary btn-sm me-1" onclick="edit(\'' + item.id + '\')"><i class="bi bi-pencil"></i> Edit</button>' +
							'<button class="btn btn-danger btn-sm" onclick="deleteUser(\'' + item.id + '\')"><i class="bi bi-trash"></i> Delete</button>' +
							'</td>';
						html += '</tr>';
					});

					$('.tblBody').html(html);
				},
				error: function (xhr, error) {
					alert(xhr.statusText);
				}
			});
		};

		function getStatusBadgeClass(status) {
			switch (status) {
				case 'Active': return 'success';
				case 'Inactive': return 'secondary';
				case 'Removed': return 'danger';
				default: return 'info';
			}
		}
		
		// Generate a random GUID for new user suggestions
		function generateGuid() {
			return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
				var r = Math.random() * 16 | 0,
					v = c === 'x' ? r : (r & 0x3 | 0x8);
				return v.toString(16);
			});
		}

		function add() {
			// Set add mode
			isAddMode = true;
			
			$("#userModalLabel").html("Add New User");
			$('#frmUser')[0].reset();
			
			// Show the ID field for add mode
			$("#idContainer").show();
			
			// Generate a random GUID as suggestion
			$("#id").val(generateGuid());
			
			// Set default dates
			const now = new Date();
			$("#createdAt").val(formatDateForInput(now));
			$("#updatedAt").val(formatDateForInput(now));
			
			$('#userModal').modal('show');
		};

		function edit(id) {
			// Set edit mode
			isAddMode = false;
			
			$("#userModalLabel").html("Edit User");

			// Clear previous form data
			$('#frmUser')[0].reset();
			
			// Hide the ID field for edit mode - we don't want to change existing IDs
			$("#idContainer").hide();

			// Get user data by ID
			$.ajax({
				url: 'https://localhost:7051/api/User/' + id,
				type: "GET",
				contentType: "application/json;charset=utf-8",
				dataType: "json",
				success: function (user) {
					// Populate form with user data
					$("#id").val(user.id); // Still set the ID but don't show it
					$("#username").val(user.username);
					$("#fullName").val(user.fullName);
					$("#email").val(user.email);
					$("#avatar").val(user.avatar);
					$("#phone").val(user.phone);
					$("#gender").val(user.gender);
					$("#role").val(user.role);
					$("#status").val(user.status);
					$("#rating").val(user.rating);

					// Format dates for datetime-local input
					if (user.createdAt) {
						$("#createdAt").val(formatDateForInput(user.createdAt));
					}
					if (user.updatedAt) {
						$("#updatedAt").val(formatDateForInput(user.updatedAt));
					}

					// Show the modal
					$('#userModal').modal('show');
				},
				error: function (xhr, error) {
					alert("Error retrieving user: " + xhr.statusText);
				}
			});
		}

		// Function to delete a user
		function deleteUser(id) {
			if (confirm("Are you sure you want to delete this user?")) {
				$.ajax({
					url: 'https://localhost:7051/api/User/' + id,
					type: "DELETE",
					contentType: "application/json;charset=utf-8",
					success: function (result) {
						if (result) {
							// Reload the data if delete was successful
							loadData();
							alert("User deleted successfully!");
						} else {
							alert("Failed to delete user.");
						}
					},
					error: function (xhr, error) {
						alert("Error: " + xhr.responseText);
						console.log(xhr);
					}
				});
			}
		}

		// Helper function to format date for datetime-local input
		function formatDateForInput(dateString) {
			const date = new Date(dateString);
			return date.toISOString().slice(0, 16); // Format: YYYY-MM-DDTHH:MM
		}
		
		// Validate GUID format
		function isValidGuid(guid) {
			const guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
			return guidRegex.test(guid);
		}

		$("#btSave").click(function () {
			// Validate required fields
			if (!$("#username").val() || !$("#fullName").val() || !$("#email").val() || 
				!$("#gender").val() || !$("#role").val() || !$("#status").val()) {
				alert("Please fill in all required fields.");
				return;
			}
			
			// If in add mode, validate the GUID format
			if (isAddMode) {
				const idValue = $("#id").val();
				if (!isValidGuid(idValue)) {
					alert("Please enter a valid GUID ID in the format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx");
					return;
				}
			}
			
			const method = isAddMode ? 'POST' : 'PUT';
			const url = 'https://localhost:7051/api/User';

			$.ajax({
				type: method,
				url: url,
				headers: {
					'Accept': 'application/json',
					'Content-Type': 'application/json; charset=utf-8'
				},
				data: JSON.stringify({
					id: $("#id").val(),
					username: $("#username").val(),
					fullName: $("#fullName").val(),
					password: $("#password").val() || "DefaultPassword123!",
					email: $("#email").val(),
					avatar: $("#avatar").val() || null,
					phone: $("#phone").val() || null,
					gender: $("#gender").val(),
					role: $("#role").val(),
					status: $("#status").val(),
					rating: $("#rating").val() ? parseFloat($("#rating").val()) : null,
					createdAt: $("#createdAt").val() || formatDateForInput(new Date()),
					updatedAt: $("#updatedAt").val() || formatDateForInput(new Date())
				}),
				success: function (result) {
					if (result > 0) {
						$('#userModal').modal('hide');
						loadData();
						alert(method === 'POST' ? "User created successfully!" : "User updated successfully!");
					}
				},
				error: function (xhr, error) {
					console.log("Error details:", xhr);
					let errorMsg = "An error occurred";
					
					try {
						const errorResponse = JSON.parse(xhr.responseText);
						if (errorResponse.title) {
							errorMsg = errorResponse.title;
						}
						if (errorResponse.errors) {
							errorMsg += ":\n";
							Object.keys(errorResponse.errors).forEach(key => {
								errorMsg += `- ${key}: ${errorResponse.errors[key].join(', ')}\n`;
							});
						}
					} catch (e) {
						errorMsg = xhr.responseText || xhr.statusText;
					}
					
					alert("Error: " + errorMsg);
				}
			});
		});
	</script>
}
